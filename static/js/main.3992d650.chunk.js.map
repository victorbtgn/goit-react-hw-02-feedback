{"version":3,"sources":["components/Container/Container.js","components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Section.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["Container","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","key","name","type","onClick","charAt","toUpperCase","slice","Section","title","defaultProps","Notification","message","Feedback","state","props","initialGood","initialNeutral","initialBad","btnIncrement","evt","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","ceil","this","Object","keys","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAKeA,G,YAFG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAU,aAAaD,K,4BCsBjDE,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,0BAAMN,UAAU,iBAAhB,SAAuCE,GACvC,0BAAMF,UAAU,iBAAhB,YAA0CG,GAC1C,0BAAMH,UAAU,iBAAhB,QAAsCI,GACtC,0BAAMJ,UAAU,iBAAhB,UAAwCK,GACvCC,EAAqB,GACpB,0BAAMN,UAAU,iBAAhB,sBACsBM,EADtB,OCWSC,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAM,OAChB,4BACEC,IAAKD,EACLE,KAAMF,EACNX,UAAU,eACVc,KAAK,SACLC,QAASN,GAERE,EAAOK,OAAO,GAAGC,cAAgBN,EAAOO,MAAM,QCT/CC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOrB,EAAV,EAAUA,SAAV,OACd,oCACGqB,GAAS,wBAAIpB,UAAU,kBAAkBoB,GAE1C,iCAAUrB,KAIdoB,EAAQE,aAAe,CACrBD,MAAO,IAOMD,QCVAG,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAKA,ICIrCC,G,kNAOJC,MAAQ,CACNvB,KAAM,EAAKwB,MAAMC,YACjBxB,QAAS,EAAKuB,MAAME,eACpBxB,IAAK,EAAKsB,MAAMG,Y,EAGlBC,aAAe,SAAAC,GACW,SAApBA,EAAIC,OAAOnB,MACb,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CAC1BhC,KAAMgC,EAAUhC,KAAO,MAIH,YAApB6B,EAAIC,OAAOnB,MACb,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CAC1B/B,QAAS+B,EAAU/B,QAAU,MAIT,QAApB4B,EAAIC,OAAOnB,MACb,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CAC1B9B,IAAK8B,EAAU9B,IAAM,O,EAK3B+B,mBAAqB,WAAO,IAAD,EACM,EAAKV,MACpC,OAFyB,EACjBvB,KADiB,EACXC,QADW,EACFC,K,EAIzBgC,gCAAkC,WAChC,OAAOC,KAAKC,KAAM,EAAKb,MAAMvB,KAAO,EAAKiC,qBAAwB,M,uDAGzD,IAAD,EACwBI,KAAKd,MAA5BvB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQkC,KAAKJ,qBACb7B,EAAqBiC,KAAKH,kCAEhC,OACE,yBAAKpC,UAAU,YACb,kBAAC,EAAD,CAASoB,MAAM,yBACb,kBAAC,EAAD,CACEZ,QAASgC,OAAOC,KAAKF,KAAKd,OAC1BhB,gBAAiB8B,KAAKT,gBAI1B,kBAAC,EAAD,CAASV,MAAM,cACZf,EAAQ,EACP,kBAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,kBAAC,EAAD,CAAciB,QAAQ,4B,GAlEXmB,cAAjBlB,EACGH,aAAe,CACpBM,YAAa,EACbC,eAAgB,EAChBC,WAAY,GAsEDL,QCtEAmB,EANH,kBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QCFJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3992d650.chunk.js","sourcesContent":["import React from 'react';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <span className=\"feedback-text\">Good: {good}</span>\n    <span className=\"feedback-text\">Neutral: {neutral}</span>\n    <span className=\"feedback-text\">Bad: {bad}</span>\n    <span className=\"feedback-text\">Total: {total}</span>\n    {positivePercentage > 0 && (\n      <span className=\"feedback-text\">\n        Positive feedback: {positivePercentage}%\n      </span>\n    )}\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(option => (\n    <button\n      key={option}\n      name={option}\n      className=\"feedback-btn\"\n      type=\"button\"\n      onClick={onLeaveFeedback}\n    >\n      {option.charAt(0).toUpperCase() + option.slice(1)}\n    </button>\n  ));\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <>\n    {title && <h2 className=\"feedback-title\">{title}</h2>}\n\n    <section>{children}</section>\n  </>\n);\n\nSection.defaultProps = {\n  title: '',\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <h3>{message}</h3>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Notification from './Notification';\nimport './Feedback.css';\n\nclass Feedback extends Component {\n  static defaultProps = {\n    initialGood: 0,\n    initialNeutral: 0,\n    initialBad: 0,\n  };\n\n  state = {\n    good: this.props.initialGood,\n    neutral: this.props.initialNeutral,\n    bad: this.props.initialBad,\n  };\n\n  btnIncrement = evt => {\n    if (evt.target.name === 'good') {\n      this.setState(prevState => ({\n        good: prevState.good + 1,\n      }));\n    }\n\n    if (evt.target.name === 'neutral') {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1,\n      }));\n    }\n\n    if (evt.target.name === 'bad') {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1,\n      }));\n    }\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.ceil((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div className=\"feedback\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.btnIncrement}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","import React from 'react';\nimport Container from './components/Container';\n\nimport Feedback from './components/Feedback';\n\nconst App = () => (\n  <Container>\n    <Feedback />\n  </Container>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}